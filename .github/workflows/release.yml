name: Release and Deploy to Packages

on:
  workflow_dispatch:
    inputs:
      next_version:
        description: 'Next development version (without -SNAPSHOT)'
        required: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get branch name
        id: branch_name
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          echo "Branch name: $BRANCH_NAME"

      - name: Validate branch
        run: |
          if [ "$BRANCH_NAME" != "main" ] && [ "$BRANCH_NAME" != "main-aem-on-prem" ]; then
            echo "Error: Releases are only allowed from 'main' or 'main-aem-on-prem' branches."
            exit 1
          fi

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: maven

      - name: Create Maven settings.xml
        run: |
          mkdir -p ~/.m2
          echo "<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"
                  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"
                  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 https://maven.apache.org/xsd/settings-1.0.0.xsd\">
            <servers>
              <server>
                <id>bb-io-AEM-github</id>
                <username>\${env.GITHUB_ACTOR}</username>
                <password>\${env.GITHUB_TOKEN}</password>
              </server>
            </servers>
          </settings>" > ~/.m2/settings.xml

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')
          echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "Current version: $CURRENT_VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Remove SNAPSHOT from version
        run: |
          mvn versions:set -DremoveSnapshot -DgenerateBackupPoms=false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Commit release version
        run: |
          git add **/pom.xml
          git commit -m "Release version ${{ env.CURRENT_VERSION }}"

      - name: Create tag
        run: |
          if [ "$BRANCH_NAME" = "main" ]; then
            git tag -a v${{ env.CURRENT_VERSION }} -m "Release version ${{ env.CURRENT_VERSION }}"
          elif [ "$BRANCH_NAME" = "main-aem-on-prem" ]; then
            git tag -a v${{ env.CURRENT_VERSION }}-aem-on-prem -m "Release version ${{ env.CURRENT_VERSION }} for aem-on-prem"
          fi

      - name: Deploy to GitHub Packages
        run: |
          if [ "$BRANCH_NAME" = "main" ]; then
            mvn clean deploy -pl :bb-aem-connector,:bb-aem-connector.all -am -DskipTests
          else
            mvn clean deploy -pl :bb-aem-connector,:bb-aem-connector.all -am -DskipTests \
              -DaltDeploymentRepository=bb-io-AEM-github::default::https://maven.pkg.github.com/bb-io/AEM/aem-on-prem
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Set next development version
        run: |
          mvn versions:set -DnewVersion=${{ github.event.inputs.next_version }}-SNAPSHOT -DgenerateBackupPoms=false
          # Update version in annotations as well
          find . -name "package-info.java" -type f -exec sed -i "s/@Version(\"[0-9.]*\")/@Version(\"${{ github.event.inputs.next_version }}\")/g" {} \;
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ACTOR: ${{ github.actor }}

      - name: Commit next development version
        run: |
          git add **/pom.xml
          git commit -m "Prepare for next development version ${{ github.event.inputs.next_version }}-SNAPSHOT"

      - name: Push changes
        run: |
          git push origin HEAD:${GITHUB_REF#refs/heads/}

          if [ "$BRANCH_NAME" = "main" ]; then
            git push origin v${{ env.CURRENT_VERSION }}
          else
            git push origin v${{ env.CURRENT_VERSION }}-aem-on-prem
          fi
